#include<iostream>
#include<vector>
#include<string>
#include<string.h>
#include<wchar.h>
#include<tchar.h>
#include"sysmets.h"
#pragma comment(lib,"WINMM.LIB")


LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//HINSTANCE 实例句柄---程序本身
int WINAPI WinMain(HINSTANCE hinstance,HINSTANCE hprevInstance,PSTR szCmdLine,int icmdshow)
{
	static TCHAR szAppName[] = TEXT("WhatSize");
	HWND		hwnd;//窗口句柄
	MSG			msg;//消息结构
	WNDCLASS	wndclass;//窗口类结构
	wndclass.style = CS_HREDRAW | CS_VREDRAW;
	wndclass.lpfnWndProc = WndProc;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hinstance;
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);//加载图标，以供程序使用
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);//加载鼠标光标，以供程序使用
	wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);//获取一个图形对象。在本例中是一个用来对窗口的背景用来重绘的画刷
	wndclass.lpszMenuName = NULL;
	wndclass.lpszClassName = szAppName;
	if (!RegisterClass(&wndclass)) {//为应用程序的窗口注册一个窗口类
		//GetLastError();
		MessageBox(NULL, TEXT("This program requires Windows NT!"), szAppName, MB_ICONERROR);//显示消息框
		return 0;
	}
	//CreateWindow  基于窗口类创建一个窗口
	hwnd = CreateWindow(szAppName,//窗口类名称
		TEXT("What Size is the Window?"),//窗口标题
		WS_OVERLAPPEDWINDOW,//窗口风格，或称窗口格式
		CW_USEDEFAULT,//初始化x坐标
		CW_USEDEFAULT,//初始化y坐标
		CW_USEDEFAULT,//初始x方向尺寸
		CW_USEDEFAULT,//初始y方向尺寸
		NULL,//父窗口句柄
		NULL,//窗口菜单句柄
		hinstance,//程序实例句柄
		NULL);//创建参数
	//MessageBox(NULL,TEXT("haha"), TEXT("1234"), 0);
	ShowWindow(hwnd, icmdshow);//在屏幕中显示窗口
	UpdateWindow(hwnd);//指示窗口对其自身重绘
	while (GetMessage(&msg, NULL, 0, 0)) {//从消息队列获取消息
		TranslateMessage(&msg);//翻译一些键盘消息
		DispatchMessage(&msg);//将消息发送给窗口过程
	}
	return msg.wParam;
}

void Show(HWND hwnd, HDC hdc, int xText, int yText, int iMapMode, TCHAR * szMapMode)
{
	TCHAR szBuffer[60];
	RECT rect;
	SaveDC(hdc);
	SetMapMode(hdc, iMapMode);
	GetClientRect(hwnd, &rect);
	DPtoLP(hdc, (PPOINT)&rect, 2);//设备坐标转逻辑坐标

	RestoreDC(hdc, -1);
	/*TextOut 显示的是MM_ANISOTROPIC映射模式,因为使用了RestoreDC函数恢复了hdc*/
	TextOut(hdc, xText, yText, szBuffer, wsprintf(szBuffer, TEXT("%-20s %7d %7d %7d %7d"), szMapMode, rect.left, rect.right, rect.top, rect.bottom));

}

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static TCHAR szHeading[] = TEXT("Mapping Mode              Left  Right     Top  Bottom");
	static TCHAR szUndLine[] = TEXT("------------              ----  -----     ---   -----");

	static int cxChar,cyChar;
	HDC				hdc;//设备环境句柄
	PAINTSTRUCT		ps;//绘制结构
	TEXTMETRIC		tm;
	switch (message)
	{
	case WM_CREATE:
		hdc = GetDC(hwnd);
		SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));

		GetTextMetrics(hdc, &tm);
		cxChar = tm.tmAveCharWidth;
		cyChar = tm.tmHeight + tm.tmExternalLeading;

		ReleaseDC(hwnd, hdc);
		return 0;
	case WM_PAINT:
		hdc = BeginPaint(hwnd, &ps);//标明窗口绘制开始
		SelectObject(hdc, GetStockObject(SYSTEM_FIXED_FONT));//字体:有衬线    gb2312 系统等宽字体
		SetMapMode(hdc, MM_ANISOTROPIC);
		//MM_ANISOTROPIC 逻辑单位转换成具有任意比例轴的任意单位，用SetWindowExt和SetViewportExt函数可指定单位、方向和比例。
		SetWindowOrgEx(hdc, 1,1,NULL);//设置逻辑坐标
		//SetViewportOrgEx(hdc, 50, 50, NULL);//设置设备坐标
		//SetWindowExtEx(hdc, 1, 1, NULL);//设置逻辑坐标范围
		SetViewportExtEx(hdc, cxChar, cyChar, NULL);//设置设备坐标范围
		/*逻辑坐标范围是(1,1)设备坐标范围是(cxChar,cyChar)表示一个逻辑坐标(1,1)相当于设备坐标(cxChar,cyChar)*/

		TextOut(hdc, 1, 1, szHeading,lstrlen(szHeading));
		TextOut(hdc, 1, 2, szUndLine, lstrlen(szUndLine));

		Show(hwnd,hdc,1,3,MM_TEXT,(TCHAR*)TEXT("TEXT(pixels)"));
		Show(hwnd, hdc, 1, 4, MM_LOMETRIC, (TCHAR*)TEXT("LOMETRIC(.1mm)"));
		Show(hwnd, hdc, 1, 5, MM_HIMETRIC, (TCHAR*)TEXT("HIMETRIC(.01mm)"));
		Show(hwnd, hdc, 1, 6, MM_LOENGLISH, (TCHAR*)TEXT("LOENGLISH(.01in)"));
		Show(hwnd, hdc, 1, 7, MM_HIENGLISH, (TCHAR*)TEXT("HIENGLISH(.001in)"));
		Show(hwnd, hdc, 1, 8, MM_TWIPS, (TCHAR*)TEXT("TWIPS(1/1440in)"));

		EndPaint(hwnd, &ps);//结束窗口绘制
		return 0;
	case WM_DESTROY:
		PostQuitMessage(0);//将退出消息插入窗口队列
		return 0;
	}
	return DefWindowProc(hwnd, message, wParam, lParam);//执行默认的消息处理
}
