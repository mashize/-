#include<iostream>
#include<vector>
#include<string>
#include<string.h>
#include<wchar.h>
#include<tchar.h>
#include"sysmets.h"
#pragma comment(lib,"WINMM.LIB")

#define NUM		1000
#define TWOPI	(2*3.14159)

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//HINSTANCE 实例句柄---程序本身
int WINAPI WinMain(HINSTANCE hinstance,HINSTANCE hprevInstance,PSTR szCmdLine,int icmdshow)
{
	static TCHAR szAppName[] = TEXT("AltWind");
	HWND		hwnd;//窗口句柄
	MSG			msg;//消息结构
	WNDCLASS	wndclass;//窗口类结构
	wndclass.style = CS_HREDRAW | CS_VREDRAW;
	wndclass.lpfnWndProc = WndProc;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hinstance;
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);//加载图标，以供程序使用
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);//加载鼠标光标，以供程序使用
	wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);//获取一个图形对象。在本例中是一个用来对窗口的背景用来重绘的画刷
	wndclass.lpszMenuName = NULL;
	wndclass.lpszClassName = szAppName;
	if (!RegisterClass(&wndclass)) {//为应用程序的窗口注册一个窗口类
		//GetLastError();
		MessageBox(NULL, TEXT("This program requires Windows NT!"), szAppName, MB_ICONERROR);//显示消息框
		return 0;
	}
	//CreateWindow  基于窗口类创建一个窗口
	hwnd = CreateWindow(szAppName,//窗口类名称
		TEXT("Alternate and Winding Fill Mode"),//窗口标题
		WS_OVERLAPPEDWINDOW,//窗口风格，或称窗口格式
		CW_USEDEFAULT,//初始化x坐标
		CW_USEDEFAULT,//初始化y坐标
		CW_USEDEFAULT,//初始x方向尺寸
		CW_USEDEFAULT,//初始y方向尺寸
		NULL,//父窗口句柄
		NULL,//窗口菜单句柄
		hinstance,//程序实例句柄
		NULL);//创建参数
	//MessageBox(NULL,TEXT("haha"), TEXT("1234"), 0);
	ShowWindow(hwnd, icmdshow);//在屏幕中显示窗口
	UpdateWindow(hwnd);//指示窗口对其自身重绘
	while (GetMessage(&msg, NULL, 0, 0)) {//从消息队列获取消息
		TranslateMessage(&msg);//翻译一些键盘消息
		DispatchMessage(&msg);//将消息发送给窗口过程
	}
	return msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static POINT aptFigure[10] = { 10,70,50,70,50,10,90,10,90,50,
									30,50,30,90,70,90,70,30,10,30 };
	int i;
	static int cxClient,cyClient;
	HDC				hdc;//设备环境句柄
	PAINTSTRUCT		ps;//绘制结构
	POINT			apt[10];
	switch (message)
	{
	case WM_SIZE:
		cxClient = LOWORD(lParam);//求当前客户区的x方向大小
		cyClient = HIWORD(lParam);//求当前客户区的y方向大小
		return 0;
	case WM_PAINT:
		hdc = BeginPaint(hwnd, &ps);//标明窗口绘制开始
		SelectObject(hdc, GetStockObject(GRAY_BRUSH));

		for (int i = 0; i < 10; ++i) {
			apt[i].x = cxClient * aptFigure[i].x / 200;
			apt[i].y = cyClient * aptFigure[i].y / 100;
		}


		SetPolyFillMode(hdc, WINDING);
		SetPolyFillMode(hdc, ALTERNATE);

			/*ALTERNATE
			为判断一个点是否位于填充区, WINDOWS会从这个点到图形外部画一条假想的线
			每与一条线相交, 计数器就会增1, 如最后一个记数是奇数, 则填充这个点; 如果是
			偶数, 则保持原样一变.

			WINDING
			为判断一个点是否位于填充区, WINDOWS会从这个点到图形外部画一条假想的线
			WINDOWS会跟踪画出每个顶点(线段)的方向, 这条假想的线每次穿过一个顶点时
			而且顶点的Y方向为正, 则减一个记数, 如结果记数不是零, 就表明该点位于填充
			区域.*/

		Polygon(hdc, apt, 10);
		
		EndPaint(hwnd, &ps);//结束窗口绘制
		return 0;
	case WM_DESTROY:
		PostQuitMessage(0);//将退出消息插入窗口队列
		return 0;
	}
	return DefWindowProc(hwnd, message, wParam, lParam);//执行默认的消息处理
}
