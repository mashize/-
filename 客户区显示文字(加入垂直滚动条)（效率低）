#include<iostream>
#include<vector>
#include<string>
#include<string.h>
#include<wchar.h>
#include<tchar.h>
#include"sysmets.h"
#pragma comment(lib,"WINMM.LIB")
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//HINSTANCE 实例句柄---程序本身
int WINAPI WinMain(HINSTANCE hinstance,HINSTANCE hprevInstance,PSTR szCmdLine,int icmdshow)
{
	static TCHAR szAppName[] = TEXT("SysMets2");
	HWND		hwnd;//窗口句柄
	MSG			msg;//消息结构
	WNDCLASS	wndclass;//窗口类结构
	wndclass.style = CS_HREDRAW | CS_VREDRAW;
	wndclass.lpfnWndProc = WndProc;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hinstance;
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);//加载图标，以供程序使用
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);//加载鼠标光标，以供程序使用
	wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);//获取一个图形对象。在本例中是一个用来对窗口的背景用来重绘的画刷
	wndclass.lpszMenuName = NULL;
	wndclass.lpszClassName = szAppName;
	if (!RegisterClass(&wndclass)) {//为应用程序的窗口注册一个窗口类
		//GetLastError();
		MessageBox(NULL, TEXT("This program requires Windows NT!"), szAppName, MB_ICONERROR);//显示消息框
		return 0;
	}
	//CreateWindow  基于窗口类创建一个窗口
	hwnd = CreateWindow(szAppName,//窗口类名称
		TEXT("Get systen Netrics No.2"),//窗口标题
		WS_OVERLAPPEDWINDOW|WS_VSCROLL,//窗口风格，或称窗口格式
		CW_USEDEFAULT,//初始化x坐标
		CW_USEDEFAULT,//初始化y坐标
		CW_USEDEFAULT,//初始x方向尺寸
		CW_USEDEFAULT,//初始y方向尺寸
		NULL,//父窗口句柄
		NULL,//窗口菜单句柄
		hinstance,//程序实例句柄
		NULL);//创建参数
	//MessageBox(NULL,TEXT("haha"), TEXT("1234"), 0);
	ShowWindow(hwnd, icmdshow);//在屏幕中显示窗口
	UpdateWindow(hwnd);//指示窗口对其自身重绘
	while (GetMessage(&msg, NULL, 0, 0)) {//从消息队列获取消息
		TranslateMessage(&msg);//翻译一些键盘消息
		DispatchMessage(&msg);//将消息发送给窗口过程
	}
	return msg.wParam;
}
LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static int cxChar, cxCaps, cyChar,cyClient,iVscrollPos;
	HDC				hdc;//设备环境句柄
	PAINTSTRUCT		ps;//绘制结构
	int				i,y;
	TCHAR			szBuffer[10];
	TEXTMETRIC		tm;
	switch (message)
	{
	case WM_CREATE:
		hdc = GetDC(hwnd);
		GetTextMetrics(hdc, &tm);
		cxChar = tm.tmAveCharWidth;// 获得小写字符的平均宽度，小写字母的加权平均值就是字符的平均宽度。
		cxCaps = (tm.tmPitchAndFamily & 1 ? 3 : 2)*cxChar / 2;
		// 获得大写字符的平均宽度，对于变宽字体而言，大写字符的平均宽度是cxChar乘以150%，而如果是等宽字体，那么cxChar就等于cxCaps。
		cyChar = tm.tmHeight + tm.tmExternalLeading;//宽度等于一个字符的宽度加上一个间隙的宽度
		ReleaseDC(hwnd, hdc);

		SetScrollRange(hwnd, SB_VERT, 0, NUMLINES - 1, FALSE);//设置当前滚动条信息。
		SetScrollPos(hwnd, SB_VERT, iVscrollPos, TRUE);//设置当前滚动条位置
		return 0;
	case WM_SIZE:
		cyClient = HIWORD(lParam);//求当前客户区的y方向大小
	case WM_VSCROLL://处理垂直滚动条
		switch (LOWORD(wParam))
		{
		case SB_LINEUP:
			iVscrollPos -= 1;
			break;
		case SB_LINEDOWN:
			iVscrollPos += 1;
			break;
		case SB_PAGEUP:
			iVscrollPos -= cyClient / cyChar;
			break;
		case SB_PAGEDOWN:
			iVscrollPos += cyClient / cyChar;
			break;
		case SB_THUMBPOSITION:
			iVscrollPos = HIWORD(wParam);
			break;
		default:
			break;
		}
		iVscrollPos = max(0, min(iVscrollPos, NUMLINES - 1));
		if (iVscrollPos != GetScrollPos(hwnd, SB_VERT)) {
			SetScrollPos(hwnd, SB_VERT, iVscrollPos, TRUE);
			InvalidateRect(hwnd, NULL, TRUE);
		}
		return 0;
	case WM_PAINT:
		hdc = BeginPaint(hwnd, &ps);//标明窗口绘制开始

		for (i = 0; i < NUMLINES; ++i) {
			y = cyChar * (i - iVscrollPos);//仔细体会y的作用，如果在当前客户区之外就不显示。
			TextOut(hdc, 0, y, sysmetrics[i].szLabel, lstrlen(sysmetrics[i].szLabel));
			TextOut(hdc, 22 * cxCaps, y, sysmetrics[i].szDesc, lstrlen(sysmetrics[i].szDesc));
			SetTextAlign(hdc, TA_RIGHT | TA_TOP);
			int len = wsprintf(szBuffer, TEXT("%d"), GetSystemMetrics(sysmetrics[i].iIndex));
			TextOut(hdc, 22 * cxCaps + 40 * cxChar, y, szBuffer,len);
			SetTextAlign(hdc, TA_LEFT | TA_TOP);
		}

		EndPaint(hwnd, &ps);//结束窗口绘制
		return 0;
	case WM_DESTROY:
		PostQuitMessage(0);//将退出消息插入窗口队列
		return 0;
	}
	return DefWindowProc(hwnd, message, wParam, lParam);//执行默认的消息处理
}
