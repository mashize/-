#include<iostream>
#include<vector>
#include<string>
#include<string.h>
#include<wchar.h>
#include<tchar.h>
#include"sysmets.h"
#pragma comment(lib,"WINMM.LIB")

#define NUM		1000
#define TWOPI	(2*3.14159)

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//HINSTANCE 实例句柄---程序本身
int WINAPI WinMain(HINSTANCE hinstance,HINSTANCE hprevInstance,PSTR szCmdLine,int icmdshow)
{
	static TCHAR szAppName[] = TEXT("Bezier");
	HWND		hwnd;//窗口句柄
	MSG			msg;//消息结构
	WNDCLASS	wndclass;//窗口类结构
	wndclass.style = CS_HREDRAW | CS_VREDRAW;
	wndclass.lpfnWndProc = WndProc;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hinstance;
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);//加载图标，以供程序使用
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);//加载鼠标光标，以供程序使用
	wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);//获取一个图形对象。在本例中是一个用来对窗口的背景用来重绘的画刷
	wndclass.lpszMenuName = NULL;
	wndclass.lpszClassName = szAppName;
	if (!RegisterClass(&wndclass)) {//为应用程序的窗口注册一个窗口类
		//GetLastError();
		MessageBox(NULL, TEXT("This program requires Windows NT!"), szAppName, MB_ICONERROR);//显示消息框
		return 0;
	}
	//CreateWindow  基于窗口类创建一个窗口
	hwnd = CreateWindow(szAppName,//窗口类名称
		TEXT("Bezier Splines"),//窗口标题
		WS_OVERLAPPEDWINDOW,//窗口风格，或称窗口格式
		CW_USEDEFAULT,//初始化x坐标
		CW_USEDEFAULT,//初始化y坐标
		CW_USEDEFAULT,//初始x方向尺寸
		CW_USEDEFAULT,//初始y方向尺寸
		NULL,//父窗口句柄
		NULL,//窗口菜单句柄
		hinstance,//程序实例句柄
		NULL);//创建参数
	//MessageBox(NULL,TEXT("haha"), TEXT("1234"), 0);
	ShowWindow(hwnd, icmdshow);//在屏幕中显示窗口
	UpdateWindow(hwnd);//指示窗口对其自身重绘
	while (GetMessage(&msg, NULL, 0, 0)) {//从消息队列获取消息
		TranslateMessage(&msg);//翻译一些键盘消息
		DispatchMessage(&msg);//将消息发送给窗口过程
	}
	return msg.wParam;
}

void DrawBezier(HDC hdc, POINT apt[])
{
	PolyBezier(hdc, apt, 4);//画贝塞尔曲线

	MoveToEx(hdc, apt[0].x, apt[0].y, NULL);
	LineTo(hdc, apt[1].x, apt[1].y);

	MoveToEx(hdc, apt[2].x, apt[2].y, NULL);
	LineTo(hdc, apt[3].x, apt[3].y);
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int cxClient,cyClient;
	HDC				hdc;//设备环境句柄
	PAINTSTRUCT		ps;//绘制结构
	static POINT			apt[4];
	switch (message)
	{
	case WM_SIZE:
		cxClient = LOWORD(lParam);//求当前客户区的x方向大小
		cyClient = HIWORD(lParam);//求当前客户区的y方向大小
		
		apt[0].x = cxClient / 4;
		apt[0].y = cyClient / 2;

		apt[1].x = cxClient / 2;
		apt[1].y = cyClient / 4;

		apt[2].x = cxClient / 2;
		apt[2].y = 3 * cyClient / 4;

		apt[3].x = 3 * cxClient / 4;
		apt[3].y = cyClient / 2;
		return 0;
	case WM_LBUTTONDOWN:
	case WM_RBUTTONDOWN:
	case WM_MOUSEMOVE:
		if (wParam & MK_LBUTTON || wParam & MK_RBUTTON){
			hdc = GetDC(hwnd);

			SelectObject(hdc, GetStockObject(WHITE_PEN));
			DrawBezier(hdc, apt);

			if (wParam & MK_LBUTTON) {
				apt[1].x = LOWORD(lParam);
				apt[1].y = HIWORD(lParam);
			}

			if (wParam & MK_RBUTTON) {
				apt[2].x = LOWORD(lParam);
				apt[2].y = HIWORD(lParam);
			}

			SelectObject(hdc, GetStockObject(BLACK_PEN));
			DrawBezier(hdc, apt);
			ReleaseDC(hwnd, hdc);
		}
		return 0;
	case WM_PAINT:
		InvalidateRect(hwnd, NULL, TRUE);

		hdc = BeginPaint(hwnd, &ps);//标明窗口绘制开始

		DrawBezier(hdc, apt);
		
		EndPaint(hwnd, &ps);//结束窗口绘制
		return 0;
	case WM_DESTROY:
		PostQuitMessage(0);//将退出消息插入窗口队列
		return 0;
	}
	return DefWindowProc(hwnd, message, wParam, lParam);//执行默认的消息处理
}
